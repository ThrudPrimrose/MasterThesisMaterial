Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -25
Gemmforge Tensor Contraction took: 48.4279 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.6544 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.1903 ms
cuTensor Tensor Contraction took: 9.8447 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 228.046
Operational intensity: 3.43566
8.7328 % of roof w. respect to operational intensity achieved with Gemmforge
42.9582 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -144
Gemmforge Tensor Contraction took: 4.82019 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.95546 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.25491 ms
cuTensor Tensor Contraction took: 10.2104 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 2291.16
Operational intensity: 3.43566
87.7374 % of roof w. respect to operational intensity achieved with Gemmforge
41.4198 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -68
Gemmforge Tensor Contraction took: 47.9104 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.6544 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.18582 ms
cuTensor Tensor Contraction took: 9.84022 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 230.51
Operational intensity: 3.43566
8.82713 % of roof w. respect to operational intensity achieved with Gemmforge
42.9778 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -152
Gemmforge Tensor Contraction took: 13.883 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.6544 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19123 ms
cuTensor Tensor Contraction took: 9.84563 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 795.493
Operational intensity: 3.43566
30.4626 % of roof w. respect to operational intensity achieved with Gemmforge
42.9542 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -167
Gemmforge Tensor Contraction took: 18.1786 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.6544 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.18982 ms
cuTensor Tensor Contraction took: 9.84422 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 607.517
Operational intensity: 3.43566
23.2642 % of roof w. respect to operational intensity achieved with Gemmforge
42.9603 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -121
Gemmforge Tensor Contraction took: 4.99165 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.6544 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19837 ms
cuTensor Tensor Contraction took: 9.85277 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 2212.46
Operational intensity: 3.43566
84.7237 % of roof w. respect to operational intensity achieved with Gemmforge
42.9231 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -64
Gemmforge Tensor Contraction took: 48.0426 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.6544 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19027 ms
cuTensor Tensor Contraction took: 9.84467 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 229.876
Operational intensity: 3.43566
8.80284 % of roof w. respect to operational intensity achieved with Gemmforge
42.9584 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -25
Gemmforge Tensor Contraction took: 119.337 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.65539 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20586 ms
cuTensor Tensor Contraction took: 9.86125 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.5429
Operational intensity: 3.43566
3.54383 % of roof w. respect to operational intensity achieved with Gemmforge
42.8862 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -76
Gemmforge Tensor Contraction took: 47.6264 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.6544 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19946 ms
cuTensor Tensor Contraction took: 9.85386 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 231.884
Operational intensity: 3.43566
8.87976 % of roof w. respect to operational intensity achieved with Gemmforge
42.9183 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -1
Gemmforge Tensor Contraction took: 117.939 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70755 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21622 ms
cuTensor Tensor Contraction took: 9.92378 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.6398
Operational intensity: 3.43566
3.58584 % of roof w. respect to operational intensity achieved with Gemmforge
42.6159 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -144
Gemmforge Tensor Contraction took: 11.677 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.2111 ms
cuTensor Tensor Contraction took: 9.91875 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 945.778
Operational intensity: 3.43566
36.2176 % of roof w. respect to operational intensity achieved with Gemmforge
42.6375 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -140
Gemmforge Tensor Contraction took: 10.1992 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19862 ms
cuTensor Tensor Contraction took: 9.90525 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 1082.81
Operational intensity: 3.43566
41.4651 % of roof w. respect to operational intensity achieved with Gemmforge
42.6957 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -49
Gemmforge Tensor Contraction took: 48.2379 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19862 ms
cuTensor Tensor Contraction took: 9.90627 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 228.945
Operational intensity: 3.43566
8.76719 % of roof w. respect to operational intensity achieved with Gemmforge
42.6912 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -13
Gemmforge Tensor Contraction took: 118.057 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20147 ms
cuTensor Tensor Contraction took: 9.9081 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.5467
Operational intensity: 3.43566
3.58227 % of roof w. respect to operational intensity achieved with Gemmforge
42.6834 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -16
Gemmforge Tensor Contraction took: 117.959 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19936 ms
cuTensor Tensor Contraction took: 9.90598 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.6238
Operational intensity: 3.43566
3.58523 % of roof w. respect to operational intensity achieved with Gemmforge
42.6925 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -24
Gemmforge Tensor Contraction took: 117.847 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70752 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20848 ms
cuTensor Tensor Contraction took: 9.916 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.7134
Operational intensity: 3.43566
3.58866 % of roof w. respect to operational intensity achieved with Gemmforge
42.6494 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -120
Gemmforge Tensor Contraction took: 20.0942 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21853 ms
cuTensor Tensor Contraction took: 9.92618 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 549.601
Operational intensity: 3.43566
21.0464 % of roof w. respect to operational intensity achieved with Gemmforge
42.6056 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -144
Gemmforge Tensor Contraction took: 13.5129 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70784 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19594 ms
cuTensor Tensor Contraction took: 9.90378 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 817.277
Operational intensity: 3.43566
31.2968 % of roof w. respect to operational intensity achieved with Gemmforge
42.702 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -72
Gemmforge Tensor Contraction took: 47.7747 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.71274 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20131 ms
cuTensor Tensor Contraction took: 9.91405 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 231.164
Operational intensity: 3.43566
8.8522 % of roof w. respect to operational intensity achieved with Gemmforge
42.6578 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -108
Gemmforge Tensor Contraction took: 10.1747 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70678 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19821 ms
cuTensor Tensor Contraction took: 9.90499 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 1085.42
Operational intensity: 3.43566
41.5652 % of roof w. respect to operational intensity achieved with Gemmforge
42.6968 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -95
Gemmforge Tensor Contraction took: 44.1202 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19709 ms
cuTensor Tensor Contraction took: 9.90474 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 250.312
Operational intensity: 3.43566
9.58543 % of roof w. respect to operational intensity achieved with Gemmforge
42.6979 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 46
Gemmforge Tensor Contraction took: 119.409 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19494 ms
cuTensor Tensor Contraction took: 9.90259 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.4872
Operational intensity: 3.43566
3.5417 % of roof w. respect to operational intensity achieved with Gemmforge
42.7071 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -36
Gemmforge Tensor Contraction took: 47.9656 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19974 ms
cuTensor Tensor Contraction took: 9.90637 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 230.244
Operational intensity: 3.43566
8.81697 % of roof w. respect to operational intensity achieved with Gemmforge
42.6908 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -48
Gemmforge Tensor Contraction took: 119.713 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19645 ms
cuTensor Tensor Contraction took: 9.90307 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.2523
Operational intensity: 3.43566
3.5327 % of roof w. respect to operational intensity achieved with Gemmforge
42.705 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -96
Gemmforge Tensor Contraction took: 49.732 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.196 ms
cuTensor Tensor Contraction took: 9.90262 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 222.066
Operational intensity: 3.43566
8.5038 % of roof w. respect to operational intensity achieved with Gemmforge
42.707 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -132
Gemmforge Tensor Contraction took: 9.98336 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21264 ms
cuTensor Tensor Contraction took: 9.92029 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 1106.22
Operational intensity: 3.43566
42.3616 % of roof w. respect to operational intensity achieved with Gemmforge
42.6309 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -1
Gemmforge Tensor Contraction took: 117.882 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19709 ms
cuTensor Tensor Contraction took: 9.90474 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.6854
Operational intensity: 3.43566
3.58758 % of roof w. respect to operational intensity achieved with Gemmforge
42.6979 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -9
Gemmforge Tensor Contraction took: 117.794 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19885 ms
cuTensor Tensor Contraction took: 9.9065 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.7556
Operational intensity: 3.43566
3.59027 % of roof w. respect to operational intensity achieved with Gemmforge
42.6903 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -60
Gemmforge Tensor Contraction took: 48.0241 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19478 ms
cuTensor Tensor Contraction took: 9.90243 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 229.964
Operational intensity: 3.43566
8.80622 % of roof w. respect to operational intensity achieved with Gemmforge
42.7078 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -40
Gemmforge Tensor Contraction took: 48.1122 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20173 ms
cuTensor Tensor Contraction took: 9.90835 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 229.543
Operational intensity: 3.43566
8.7901 % of roof w. respect to operational intensity achieved with Gemmforge
42.6823 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -12
Gemmforge Tensor Contraction took: 117.801 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19706 ms
cuTensor Tensor Contraction took: 9.90368 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.75
Operational intensity: 3.43566
3.59006 % of roof w. respect to operational intensity achieved with Gemmforge
42.7024 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 31
Gemmforge Tensor Contraction took: 118.111 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21248 ms
cuTensor Tensor Contraction took: 9.9191 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.5033
Operational intensity: 3.43566
3.58061 % of roof w. respect to operational intensity achieved with Gemmforge
42.636 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -176
Gemmforge Tensor Contraction took: 11.7447 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.7056 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20227 ms
cuTensor Tensor Contraction took: 9.90787 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 940.32
Operational intensity: 3.43566
36.0086 % of roof w. respect to operational intensity achieved with Gemmforge
42.6844 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -97
Gemmforge Tensor Contraction took: 4.8537 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 8.01894 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.27254 ms
cuTensor Tensor Contraction took: 10.2915 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 2275.34
Operational intensity: 3.43566
87.1318 % of roof w. respect to operational intensity achieved with Gemmforge
41.0933 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -48
Gemmforge Tensor Contraction took: 48.2286 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20797 ms
cuTensor Tensor Contraction took: 9.91562 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 228.989
Operational intensity: 3.43566
8.76889 % of roof w. respect to operational intensity achieved with Gemmforge
42.651 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -191
Gemmforge Tensor Contraction took: 11.7616 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70746 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20416 ms
cuTensor Tensor Contraction took: 9.91162 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 938.969
Operational intensity: 3.43566
35.9568 % of roof w. respect to operational intensity achieved with Gemmforge
42.6682 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -119
Gemmforge Tensor Contraction took: 45.7585 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19712 ms
cuTensor Tensor Contraction took: 9.90477 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 241.35
Operational intensity: 3.43566
9.24224 % of roof w. respect to operational intensity achieved with Gemmforge
42.6977 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -1
Gemmforge Tensor Contraction took: 119.065 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20122 ms
cuTensor Tensor Contraction took: 9.90784 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.7548
Operational intensity: 3.43566
3.55195 % of roof w. respect to operational intensity achieved with Gemmforge
42.6845 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -61
Gemmforge Tensor Contraction took: 47.6996 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.196 ms
cuTensor Tensor Contraction took: 9.90262 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 231.528
Operational intensity: 3.43566
8.86614 % of roof w. respect to operational intensity achieved with Gemmforge
42.707 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -136
Gemmforge Tensor Contraction took: 11.4983 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19792 ms
cuTensor Tensor Contraction took: 9.90454 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 960.473
Operational intensity: 3.43566
36.7803 % of roof w. respect to operational intensity achieved with Gemmforge
42.6987 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 3
Gemmforge Tensor Contraction took: 118.326 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21066 ms
cuTensor Tensor Contraction took: 9.91728 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.3341
Operational intensity: 3.43566
3.57413 % of roof w. respect to operational intensity achieved with Gemmforge
42.6439 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 22
Gemmforge Tensor Contraction took: 118.98 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70867 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19926 ms
cuTensor Tensor Contraction took: 9.90794 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.8207
Operational intensity: 3.43566
3.55447 % of roof w. respect to operational intensity achieved with Gemmforge
42.6841 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -37
Gemmforge Tensor Contraction took: 119.606 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21574 ms
cuTensor Tensor Contraction took: 9.92237 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.3349
Operational intensity: 3.43566
3.53587 % of roof w. respect to operational intensity achieved with Gemmforge
42.622 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -108
Gemmforge Tensor Contraction took: 49.1827 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19818 ms
cuTensor Tensor Contraction took: 9.90582 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 224.547
Operational intensity: 3.43566
8.59879 % of roof w. respect to operational intensity achieved with Gemmforge
42.6932 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 7
Gemmforge Tensor Contraction took: 118.811 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19824 ms
cuTensor Tensor Contraction took: 9.90589 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.9528
Operational intensity: 3.43566
3.55953 % of roof w. respect to operational intensity achieved with Gemmforge
42.6929 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -72
Gemmforge Tensor Contraction took: 47.848 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19696 ms
cuTensor Tensor Contraction took: 9.90358 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 230.81
Operational intensity: 3.43566
8.83864 % of roof w. respect to operational intensity achieved with Gemmforge
42.7028 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 10
Gemmforge Tensor Contraction took: 119.218 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19792 ms
cuTensor Tensor Contraction took: 9.90454 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.6357
Operational intensity: 3.43566
3.54739 % of roof w. respect to operational intensity achieved with Gemmforge
42.6987 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -5
Gemmforge Tensor Contraction took: 117.854 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19946 ms
cuTensor Tensor Contraction took: 9.9071 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.7079
Operational intensity: 3.43566
3.58845 % of roof w. respect to operational intensity achieved with Gemmforge
42.6877 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 23
Gemmforge Tensor Contraction took: 117.941 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19568 ms
cuTensor Tensor Contraction took: 9.90333 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.6386
Operational intensity: 3.43566
3.58579 % of roof w. respect to operational intensity achieved with Gemmforge
42.7039 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 35
Gemmforge Tensor Contraction took: 117.788 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70768 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19501 ms
cuTensor Tensor Contraction took: 9.90269 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.7601
Operational intensity: 3.43566
3.59045 % of roof w. respect to operational intensity achieved with Gemmforge
42.7067 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -133
Gemmforge Tensor Contraction took: 4.76048 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70685 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19581 ms
cuTensor Tensor Contraction took: 9.90266 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 2319.89
Operational intensity: 3.43566
88.8379 % of roof w. respect to operational intensity achieved with Gemmforge
42.7068 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -72
Gemmforge Tensor Contraction took: 48.1141 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19843 ms
cuTensor Tensor Contraction took: 9.90506 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 229.534
Operational intensity: 3.43566
8.78975 % of roof w. respect to operational intensity achieved with Gemmforge
42.6965 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -80
Gemmforge Tensor Contraction took: 48.0426 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19638 ms
cuTensor Tensor Contraction took: 9.90301 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 229.875
Operational intensity: 3.43566
8.80284 % of roof w. respect to operational intensity achieved with Gemmforge
42.7053 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -112
Gemmforge Tensor Contraction took: 11.656 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21558 ms
cuTensor Tensor Contraction took: 9.92323 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 947.481
Operational intensity: 3.43566
36.2828 % of roof w. respect to operational intensity achieved with Gemmforge
42.6183 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 14
Gemmforge Tensor Contraction took: 119.72 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21421 ms
cuTensor Tensor Contraction took: 9.92083 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.2467
Operational intensity: 3.43566
3.53249 % of roof w. respect to operational intensity achieved with Gemmforge
42.6286 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -148
Gemmforge Tensor Contraction took: 11.7489 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19872 ms
cuTensor Tensor Contraction took: 9.90637 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 939.984
Operational intensity: 3.43566
35.9957 % of roof w. respect to operational intensity achieved with Gemmforge
42.6908 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -87
Gemmforge Tensor Contraction took: 44.182 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.2024 ms
cuTensor Tensor Contraction took: 9.90902 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 249.962
Operational intensity: 3.43566
9.57202 % of roof w. respect to operational intensity achieved with Gemmforge
42.6794 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -72
Gemmforge Tensor Contraction took: 50.2852 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.22234 ms
cuTensor Tensor Contraction took: 9.92998 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 219.624
Operational intensity: 3.43566
8.41026 % of roof w. respect to operational intensity achieved with Gemmforge
42.5893 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: 11
Gemmforge Tensor Contraction took: 119.651 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21277 ms
cuTensor Tensor Contraction took: 9.91939 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.3
Operational intensity: 3.43566
3.53453 % of roof w. respect to operational intensity achieved with Gemmforge
42.6348 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -1
Gemmforge Tensor Contraction took: 119.481 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19837 ms
cuTensor Tensor Contraction took: 9.90602 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.4316
Operational intensity: 3.43566
3.53957 % of roof w. respect to operational intensity achieved with Gemmforge
42.6924 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -180
Gemmforge Tensor Contraction took: 11.6482 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21616 ms
cuTensor Tensor Contraction took: 9.92381 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 948.114
Operational intensity: 3.43566
36.307 % of roof w. respect to operational intensity achieved with Gemmforge
42.6158 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -57
Gemmforge Tensor Contraction took: 47.7815 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20211 ms
cuTensor Tensor Contraction took: 9.90976 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 231.131
Operational intensity: 3.43566
8.85094 % of roof w. respect to operational intensity achieved with Gemmforge
42.6762 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -168
Gemmforge Tensor Contraction took: 11.7639 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21661 ms
cuTensor Tensor Contraction took: 9.92426 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 938.79
Operational intensity: 3.43566
35.95 % of roof w. respect to operational intensity achieved with Gemmforge
42.6139 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -144
Gemmforge Tensor Contraction took: 11.7376 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70682 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.2128 ms
cuTensor Tensor Contraction took: 9.91962 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 940.892
Operational intensity: 3.43566
36.0305 % of roof w. respect to operational intensity achieved with Gemmforge
42.6338 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -144
Gemmforge Tensor Contraction took: 10.1835 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19728 ms
cuTensor Tensor Contraction took: 9.90493 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 1084.49
Operational intensity: 3.43566
41.5292 % of roof w. respect to operational intensity achieved with Gemmforge
42.697 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -156
Gemmforge Tensor Contraction took: 13.5608 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70867 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20157 ms
cuTensor Tensor Contraction took: 9.91024 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 814.39
Operational intensity: 3.43566
31.1862 % of roof w. respect to operational intensity achieved with Gemmforge
42.6742 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -84
Gemmforge Tensor Contraction took: 47.5884 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19757 ms
cuTensor Tensor Contraction took: 9.90419 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 232.069
Operational intensity: 3.43566
8.88685 % of roof w. respect to operational intensity achieved with Gemmforge
42.7002 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -33
Gemmforge Tensor Contraction took: 119.704 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.21344 ms
cuTensor Tensor Contraction took: 9.92109 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 92.2594
Operational intensity: 3.43566
3.53298 % of roof w. respect to operational intensity achieved with Gemmforge
42.6275 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -104
Gemmforge Tensor Contraction took: 49.3698 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.1993 ms
cuTensor Tensor Contraction took: 9.90694 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 223.696
Operational intensity: 3.43566
8.56619 % of roof w. respect to operational intensity achieved with Gemmforge
42.6883 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -129
Gemmforge Tensor Contraction took: 4.98413 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19882 ms
cuTensor Tensor Contraction took: 9.90544 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 2215.8
Operational intensity: 3.43566
84.8516 % of roof w. respect to operational intensity achieved with Gemmforge
42.6948 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -1
Gemmforge Tensor Contraction took: 117.811 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19744 ms
cuTensor Tensor Contraction took: 9.90406 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 93.7416
Operational intensity: 3.43566
3.58974 % of roof w. respect to operational intensity achieved with Gemmforge
42.7008 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -155
Gemmforge Tensor Contraction took: 10.0256 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19834 ms
cuTensor Tensor Contraction took: 9.90598 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 1101.56
Operational intensity: 3.43566
42.183 % of roof w. respect to operational intensity achieved with Gemmforge
42.6925 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -159
Gemmforge Tensor Contraction took: 11.4234 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70765 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.20413 ms
cuTensor Tensor Contraction took: 9.91178 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 966.774
Operational intensity: 3.43566
37.0216 % of roof w. respect to operational intensity achieved with Gemmforge
42.6675 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -83
Gemmforge Tensor Contraction took: 44.3772 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70662 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19814 ms
cuTensor Tensor Contraction took: 9.90477 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 248.862
Operational intensity: 3.43566
9.52992 % of roof w. respect to operational intensity achieved with Gemmforge
42.6977 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
Current Device Alloc Size: 2.6118
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with Gemmforge
Unroll parameters: -72
Gemmforge Tensor Contraction took: 44.2814 ms
Will compute the kernel: C['ij'] <= C['ij'] + A['lj'] * B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 1: X['il'] <= B['ikl'] * w['k'], with cuTensor
Need to split into 2 kernels, 2: C['ij'] <=  A['lj'] * X['il'], with cuTensor
Batched version managed through: C['ijb'] <= C['ijb'] + A['ljb'] * B['iklb'] * w['kb'], with cuTensor
Current Device Alloc Size: 2.73918
Current Device Alloc Size: 2.73896
cuTensor Kernel 1
Alloc additional buffer: 2.05359
Current Device Alloc Size: 4.79255
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 1 took: 7.70864 ms
cuTensor Kernel 2
Alloc additional buffer: 0.0156252
Current Device Alloc Size: 2.75458
Sub-kernel 1 succeeded.
Current Device Alloc Size: 2.73896
cuTensor sub-kernel 2 took: 2.19523 ms
cuTensor Tensor Contraction took: 9.90387 ms
Gemmforge and cuTensor contraction results match! :)
Gemmforge GFLOPs/s: 249.4
Operational intensity: 3.43566
9.55053 % of roof w. respect to operational intensity achieved with Gemmforge
42.7016 % of roof w. respect to operational intensity achieved with cuTensor
Current Device Alloc Size: 0
